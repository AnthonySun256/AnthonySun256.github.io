<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言基础教程（三）</title>
      <link href="/2020/02/c-yu-yan-ji-chu-jiao-cheng-san/"/>
      <url>/2020/02/c-yu-yan-ji-chu-jiao-cheng-san/</url>
      
        <content type="html"><![CDATA[<p>上一篇，我们讲了printf的基本用法，并写了一个简单的计算器。</p><p>还记得上一篇最后的<strong>任务</strong>吗？</p><blockquote><p>计算 3/2 的得数</p></blockquote><p>如果你的代码是这样的</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3/2 = %d"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们的程序会输出一个很奇怪的结果：<strong><em>1</em></strong></p><h1 id="为什么3-2会等于1？"><a href="#为什么3-2会等于1？" class="headerlink" title="为什么3/2会等于1？"></a>为什么3/2会等于1？</h1><p>要说明这个问题我们有必要先了解C语言是怎样存储和表示数字和字符的</p><h2 id="C语言基本数据类型"><a href="#C语言基本数据类型" class="headerlink" title="C语言基本数据类型"></a>C语言基本数据类型</h2><p>C语言有六种基本数据类型，他们分别是 short、long、int、float、double、char</p><p>在内存中，不同的类型占用不同的空间，short占2byte，int占4byte，long占4byte，float占2byte，double占8byte，char占1byte</p><blockquote><p>​    注：这个不绝对，可能会有所出入，应视具体情况而定</p></blockquote><h3 id="为什么引入数据类型"><a href="#为什么引入数据类型" class="headerlink" title="为什么引入数据类型"></a>为什么引入数据类型</h3><blockquote><p>如果你实在想知道，那我推荐这篇博文 <a href="https://www.2cto.com/kf/201707/654323.html" target="_blank" rel="noopener">数据类型的本质</a></p><blockquote><p>不懂什么是变量？不要着急，本篇后面会说明清楚</p></blockquote><p>不知道为什么并不影响你学习C语言</p></blockquote><h3 id="数据类型相互转化"><a href="#数据类型相互转化" class="headerlink" title="数据类型相互转化"></a>数据类型相互转化</h3><p>C语言是允许不同类型的数据相互转化的，但因为C语言内部存储机制的问题，有些时候这种转化会导致你丢失一些东西</p><p>比如，int类型表示的是整数，如果你把一个小数转换成整数，我们只能得到这个小数的整数部分，它小数点后面的部分都被丢弃了</p><blockquote><p>在程序中使用 类型名称(数据) ，可以强制转换类型</p><p>例如 int(1.5)可以把1.5这个小数转为int类型（但是只能得到1，小数部分被自动丢掉了）</p></blockquote><h3 id="为什么我们的程序输出了整数？"><a href="#为什么我们的程序输出了整数？" class="headerlink" title="为什么我们的程序输出了整数？"></a>为什么我们的程序输出了整数？</h3><p>理论上来讲3/2应该得到 1.5，根据分类，这应该是一个float或者double类型的小数，但是我们的程序却输出了 1 这个int类型的整数</p><p>这是因为有些时候C语言会自动帮你完成类型转换这一过程</p><p>还记得我们的程序吗</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3/2 = %d"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>未完待续 2020年2月11日 23点57分 更新</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MiniZinc学习笔记</title>
      <link href="/2020/02/minizinc-xue-xi-bi-ji/"/>
      <url>/2020/02/minizinc-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>最近在Coursera上学了 <a href="https://www.coursera.org/learn/lisan-youhua-jianmo-jichupian" target="_blank" rel="noopener">离散优化建模</a>，里面介绍了MiniZinc这个建模语言，个人觉得比较新奇</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul><li><p>MiniZinc 语句顺序不重要</p><ul><li>你可以先定义变量再写表达式，这不是一个需要编译或者逐句解释得语言</li><li>写的程序主要是为了给后端得求解器描述问题</li></ul><ul><li>关于变量<ul><li>MiniZinc变量类型主要分为两大类<ul><li>参数</li><li>决策变量</li></ul></li></ul></li></ul></li></ul><p>其中<strong>参数</strong>类似于其他语言中的<strong>常量</strong>，<strong>只能在程序开始的时候被赋值</strong>而且<strong>只能被赋值一次</strong></p><p><strong>决策变量</strong>相当于其他语言中普通的可变变量（类似于方程中的未知数）</p><p><img src="https://img-blog.csdnimg.cn/20200210125011804.png" alt="变量声明"></p><p>可以看到，MiniZinc对于变量声明方式也是比较特殊的，形式为<code>变量类型描述:变量名称</code></p><p>当然，这两个分类只是从<strong>变量是不是常量</strong>的角度划分的</p><p>MiniZinc像其他语言一样，支持整数、浮点，数组、字符串、枚举、集合等类型</p><p>比如生成一个大小为10的int类型数组</p><ul><li>1..10代表从1到10的一个<strong>整数序列</strong></li><li>数组统一用array[]表示，方括号里边写数组包含的下标，图里的数组可以访问的下标范围是1~10</li><li>数组的下标可以是任意的类型（文字什么的也都可以，类似于字典，不过只能一对一）</li></ul><p><img src="https://img-blog.csdnimg.cn/20200210125104691.png" alt="声明一个下标为1~10的int类型数组"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>MiniZinc是建模语言，它的主要作用是求解数学模型，我们光定义变量是不够的，一个模型除了$x,y,z$这样的变量还有会有很多的<strong>约束</strong>，比如$x = y+1$、$x\ge5$、$z\in R$ 等等，那么这些约束要怎样表达出来呢？</p><p>以一个简单的约束问题来看</p><p>$$x\in[-1,10],x\in Z,y=-(x-1)^2$$</p><p>求$max(y)$</p><p>很明显，这个问题的意思就是，x可以取从-1到10的整数（也就是x可以等于-1,0,1,2,3,4,5,6,7,8,9,10）$y=-(x-1)^2$ ，求一下 $y$ 的最大值</p><p>这个问题很简单，但足够用来说明MiniZinc的语法</p><p>首先我们定义变量x和y</p><pre><code>var int: x; %定义整数变量xvar int: y; %定义整数变量y</code></pre><p>接着，我们给x限定取值范围，并输入表达式 $y=-(x-1)^2$ ，这时候就需要用到我们的<strong>约束关键字</strong>了</p><pre><code>var int: x; %定义整数变量xvar int: y; %定义整数变量yconstraint x&gt;=-1;constraint x&lt;=10;constraint y = -((x-1)^2) %必须要加上括号，不然会出问题</code></pre><p>这里面，<strong>constraint</strong> 之后放上就是我们模型的约束</p><p>最后，我们要求最大值，使用 <strong>solve</strong> 语句</p><pre><code>var int: x; %定义整数变量xvar int: y; %定义整数变量yconstraint x&gt;=-1;constraint x&lt;=10;constraint y = -((x-1)^2) %必须要加上括号，不然会出问题solve maximize y;</code></pre><p><strong>solve</strong> 后面紧跟着我们想要的目标，maximize是MiniZinc内置的关键字，表示求最大值（最小值是minimize），后面接上y，表示求y这个变量的最大值</p><p>运行这个脚本，我们可以得到</p><blockquote><p>x=1;</p><p>y=0;</p></blockquote><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>对于这个脚本，我们可以进行一些优化，让脚本行数更少一些</p><blockquote><p>注意：一般来讲，模型的描述越紧凑，MiniZinc求解的速度越快，尤其是聚类等问题，越少使用constraint，求解速度越快</p></blockquote><p>首先，我们可以在变量定义的时候就限制x的取值范围</p><pre><code>var -1..10: x; %x可以是从-1到10的任意整数</code></pre><p>其次，我们可以在变量定义的时候就给y赋值</p><pre class="line-numbers language-\"><code class="language-\">var int: y = -((x-1)^2);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们的脚本就优化成了这样</p><pre><code>var -1..10: x; var int: y=-((x-1)^2);solve maximize y;</code></pre><p>理论上，这样的模型具有更快的求解速度（不绝对，视求解器而定）</p><h3 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h3><p>我们发现，这个脚本运行以后只输出x的值，不输出y了</p><p>对此，我们需要指定脚本的输出格式。</p><p>语法如下</p><pre><code>output &lt;字符串列表&gt;;</code></pre><p>与C语言类似，字符串写在<kbd>"</kbd> <kbd>"</kbd>里面，也支持\t \n等转义符</p><p>对于如果要输出变量可以采用<strong>(变量名)</strong>的方式或者 <strong>“字符串”++show(变量名)</strong>的方式</p><blockquote><p>注意：MIniZinc里两个字符串之间用两个加号连接</p></blockquote><p>一般来讲，我们这样书写输出语句</p><pre><code>output [&quot;1+1 = &quot; ++ show(1+1)]; %写在方括号里，show函数把变量或者其他类型转为字符串类型</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MiniZinc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础教程（二）</title>
      <link href="/2020/02/c-yu-yan-ji-chu-jiao-cheng-er/"/>
      <url>/2020/02/c-yu-yan-ji-chu-jiao-cheng-er/</url>
      
        <content type="html"><![CDATA[<h1 id="简单计算器"><a href="#简单计算器" class="headerlink" title="简单计算器"></a>简单计算器</h1><blockquote><p>回顾：<br>在上一篇的教程中，我们了解了printf的功能和它的由来</p></blockquote><p>还记得我们上一篇的代码吗？</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，把<code>printf(&quot;Hello World&quot;);</code>改成<code>printf(&quot;1+1 = %d&quot;,1+1);</code><br>我们得到以下代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1+1 = %d"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，运行一下，来看看结果如何</p><p><img src="https://img-blog.csdnimg.cn/20200209215420217.png" alt="真理"><br>果然，如你料想的一样，这个程序输出了<strong>1+1 = 2</strong>这个真理</p><p>那么，让我们端详一下<strong>printf()括号里面</strong>的变化：</p><ul><li>等号后面有奇怪的 <strong>%d</strong></li><li>双引号外面多了个逗号，后面又有一个1+1</li></ul><p><code>如图所示</code><br><img src="https://img-blog.csdnimg.cn/20200209221042996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDA1NTg=,size_16,color_FFFFFF,t_70" alt="代码的变化"><br>双引号里面的 <strong>%d</strong> 叫做<strong>占位符</strong>，顾名思义，<strong>%d</strong>只是替一个整数值占了个位置，在程序运行时后面<strong>1+1</strong>这个式子的结果会替换掉 <strong>%d</strong><br><img src="https://img-blog.csdnimg.cn/20200209221506654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDA1NTg=,size_16,color_FFFFFF,t_70" alt="替换方式"></p><blockquote><p>注意：printf的使用要遵照这样的格式：<strong>printf(“格式化字符串”, 参数1, 参数2, … ,参数n)；</strong><br>其中<strong>格式化字符串</strong>是你想要输出的主要内容，参数1..n为放在文中占位符的东西，参数之间用<strong>英文逗号</strong>隔开</p></blockquote><p>C语言还支持很多其他的占位符，如表所示，在之后的章节中，我们随用随说</p><table><thead><tr><th>占位符</th><th>占的位置代表类型</th></tr></thead><tbody><tr><td>%c</td><td>一个字符</td></tr><tr><td>%d</td><td>十进制整数</td></tr><tr><td>%i</td><td>十进制、八进制、十六进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%f,%F,%e,%E,%g,%G</td><td>实数，可以是小数或者指数形式</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%%</td><td>百分号</td></tr></tbody></table><p>在上面简单计算器的基础上，我们可以做一些小的扩展，比如，我希望计算下面算式的结果</p><table><thead><tr><th>2+2</th><th>2*3</th><th>4➗2</th></tr></thead></table><p>根据我们上面所讲，我们可以可以尝试拼凑出下面的一行代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2+2 = %d, 2*3 = %d, 3/2 = %d"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：C语言的除号是<kbd>/</kbd>，而不是➗</p></blockquote><p>把它替换掉原来的printf我们得到以下程序</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2+2 = %d, 2*3 = %d, 3/2 = %d"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来运行一下这个程序，看一看结果<br><img src="https://img-blog.csdnimg.cn/20200209223323912.png" alt="倒是没算错"><br>当然，其实我们更希望程序能像下面这样分行输出</p><blockquote><p>2+2 = 4,<br>2*3 = 6,<br>4/2 = 2</p></blockquote><p>但经过之前的实践，我们知道不论是用多个printf还是加上回车我们都无法成功换行。</p><h1 id="如何换行？"><a href="#如何换行？" class="headerlink" title="如何换行？"></a>如何换行？</h1><p>这时候，就需要用到一个叫做转义符的东西 <strong>“\n”</strong>，我们把之前的代码改成这样</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2+2 = %d,\n 2*3 = %d,\n 3/2 = %d"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会有效果吗？运行一下再说</p><p><img src="https://img-blog.csdnimg.cn/20200209223958979.png" alt="商业级排版"></p><p><strong>完美！</strong> 我们成功实现了让文字换行输出</p><p>别着急，还有一个新的问题</p><h1 id="什么是转义符？"><a href="#什么是转义符？" class="headerlink" title="什么是转义符？"></a>什么是转义符？</h1><p>简单来说就是我们把键盘上一些特殊的功能键（回车、制表符、退格……）设置成了一些指令，具体来讲，C语言支持以下转义符</p><table><thead><tr><th align="center">转义字符</th><th align="left">意义</th></tr></thead><tbody><tr><td align="center">\a</td><td align="left">响铃(BEL)</td></tr><tr><td align="center">\b</td><td align="left">退格(BS) ，将当前位置移到前一列</td></tr><tr><td align="center">\f</td><td align="left">换页(FF)，将当前位置移到下页开头</td></tr><tr><td align="center">\n</td><td align="left">换行(LF) ，将当前位置移到下一行开头</td></tr><tr><td align="center">\r</td><td align="left">回车(CR) ，将当前位置移到本行开头</td></tr><tr><td align="center">\t</td><td align="left">水平制表(HT)</td></tr><tr><td align="center">\v</td><td align="left">垂直制表(VT)</td></tr><tr><td align="center">\\’</td><td align="left">单引号</td></tr><tr><td align="center">\\”</td><td align="left">双引号</td></tr><tr><td align="center">\\\</td><td align="left">反斜杠</td></tr></tbody></table><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>请尝试用本章所讲计算 3/2 的结果</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础教程（一）</title>
      <link href="/2020/02/c-yu-yan-ji-chu-jiao-cheng-yi/"/>
      <url>/2020/02/c-yu-yan-ji-chu-jiao-cheng-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="关于编程环境"><a href="#关于编程环境" class="headerlink" title="关于编程环境"></a>关于编程环境</h1><p>网络上有很多C语言编程环境的配置教程，也有很多开箱即用的安装包，请大家自行摸索，对于学习来讲，微软的Visual Studio足以满足我们的需求。</p><p><code>注意：由于编译器不同，Visual Studio并不完全适合C语言开发，如果您的学校有具体的环境要求，还请遵照学校要求</code></p><blockquote><p>对于刚刚接触编程的新手，我本人<strong>不提倡</strong>直接在Linux环境编程（即使这样很装逼），也<strong>不提倡</strong>使用文本编辑器结合控制台指令编译的方式进行学习！</p></blockquote><h1 id="开篇：Hello-World"><a href="#开篇：Hello-World" class="headerlink" title="开篇：Hello World"></a>开篇：Hello World</h1><p>首先，请新建一个空白的文件，重命名为 Hello World.c<br>把下面的东西复制粘贴到你新建的文件里面</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用您ide的编译运行功能（一般快捷键为<kbd>F5</kbd>)，您应当能看到一个黑色窗口弹出，并显示如下文字<br><img src="https://img-blog.csdnimg.cn/2020020722072394.png" alt="你好，世界！"></p><p><code>没有显示，或者黑窗一闪而过？，请尝试以下代码！</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>我想现在你一定有很多的疑问，但请不要着急，接下来我会进行说明。</code></p><h2 id="关于printf-“Hello-World”"><a href="#关于printf-“Hello-World”" class="headerlink" title="关于printf(“Hello World”)"></a>关于printf(“Hello World”)</h2><p><strong>究竟是什么东西让我的屏幕上显示出了 Hello World ?</strong></p><p>如果你把程序进行修改，比如把双引号里面的 <em>Hello World</em> 换成 <em>您吃了吗？</em> ，你会发现程序的运行结果也随之改变。<br><strong>e.g.</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>换为</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更进一步，如果你把 <strong>printf(“您吃了吗？”);</strong> 多复制几次，比如这样</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，请保持您新输入的东西在 <strong>int main(){ </strong> 和 <strong>return 0</strong>之间，稍后我会说明原因</p></blockquote><p>再次运行程序，你会发现你的屏幕上出现了一连串来自电脑的亲切的问候.<br><img src="https://img-blog.csdnimg.cn/20200207223123544.png" alt="冬日里温暖的问候"></p><blockquote><p>当然，作为完美主义者，您可能并 <strong>不喜欢这些话挤在一行</strong> ，可如果你尝试在句子里添加回车，你会发现加再多的回车也<strong>没有效果</strong>，甚至会导致程序无法运行，请不要着急，稍后我会说明原因</p></blockquote><p>这时候，相信您已经猜到了，就是这个看起来很奇怪的 <strong>printf(“ “);</strong> 把我们投喂给它的东西放到了屏幕上</p><h3 id="printf-是什么，它是从哪来的？"><a href="#printf-是什么，它是从哪来的？" class="headerlink" title="printf()是什么，它是从哪来的？"></a>printf()是什么，它是从哪来的？</h3><p>还记得我们最开始的程序吗</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意看这一句</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>#include</strong>是什么？<br>如果我们说的专业一点就是</p><blockquote><p>#include 是C/C++中包含头文件命令，用于将指定头文件嵌入源文件中。<br>……来自百度百科</p></blockquote><p>当然，这样的解释对于新手来讲未免看的有些云里雾里。<br>为了深刻理解，我们不妨<strong>先删掉</strong>代码中的<code>#include &lt;stdio.h&gt;</code></p><p>我们的程序就变成了这样</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，如果我们重新编译运行程序，我们只会得到一条错误信息：<code>“printf”: 找不到标识符</code></p><p><code>注意：不同的ide对于错误提示可能有所不同</code></p><p>发生了什么？我们的编译器找不到<strong>printf</strong>了</p><p>那么是不是C语言本身并不包含<strong>printf</strong>这个东西，<strong>它其实是存在于其他人写好的文件当中</strong>呢?</p><p>确实是这样，C语言本身不能直接在屏幕上显示文字，<strong>前辈们</strong>为了方便后人编写程序，已经把输出文字的功能写好，并装在了<strong>stdio.h</strong>文件里头</p><p>而 <code>#include&lt;stdio.h&gt;</code> 就是告诉你的编译器把<code>stdio.h</code>这个文件的内容加载到你的程序里面，让你能直接使用前辈的智慧结晶</p><p><code>注意：stdio.h 里并不包含printf的完整实现，之后我会说明清楚</code></p><p>这里面，<strong>前辈写的程序</strong>被<strong>包装</strong>成了<strong>函数</strong>，<strong>函数</strong>有个<strong>名字</strong>叫做<strong>printf</strong></p><p><strong>什么是函数？</strong>，这里我不做过多解释，你完全可以认为<strong>函数就是</strong>一个黑盒子、一个<strong>自动炒菜锅</strong>，你把<strong>菜</strong>放<strong>进括号</strong>，<strong>他给你炒出你要的菜</strong></p><blockquote><p>不懂什么是 <strong>函数</strong> ？ 不要着急，之后我会花一章来慢慢说明</p></blockquote><p>现在，我们知道，<strong>printf</strong>来自<strong>stdio.h</strong>（全称 standard input &amp; output 即标准输入输出）这个文件，它由前辈们编写，为了方便我们编写其他的C程序。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
