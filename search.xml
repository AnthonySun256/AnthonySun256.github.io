<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言基础教程（二）</title>
      <link href="/2020/02/09/c-yu-yan-ji-chu-jiao-cheng-er/"/>
      <url>/2020/02/09/c-yu-yan-ji-chu-jiao-cheng-er/</url>
      
        <content type="html"><![CDATA[<h1 id="简单计算器"><a href="#简单计算器" class="headerlink" title="简单计算器"></a>简单计算器</h1><blockquote><p>回顾：<br>在上一篇的教程中，我们了解了printf的功能和它的由来</p></blockquote><p>还记得我们上一篇的代码吗？</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，把<code>printf(&quot;Hello World&quot;);</code>改成<code>printf(&quot;1+1 = %d&quot;,1+1);</code><br>我们得到以下代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1+1 = %d"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，运行一下，来看看结果如何</p><p><img src="https://img-blog.csdnimg.cn/20200209215420217.png" alt="真理"><br>果然，如你料想的一样，这个程序输出了<strong>1+1 = 2</strong>这个真理</p><p>那么，让我们端详一下<strong>printf()括号里面</strong>的变化：</p><ul><li>等号后面有奇怪的 <strong>%d</strong></li><li>双引号外面多了个逗号，后面又有一个1+1</li></ul><p><code>如图所示</code><br><img src="https://img-blog.csdnimg.cn/20200209221042996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDA1NTg=,size_16,color_FFFFFF,t_70" alt="代码的变化"><br>双引号里面的 <strong>%d</strong> 叫做<strong>占位符</strong>，顾名思义，<strong>%d</strong>只是替一个整数值占了个位置，在程序运行时后面<strong>1+1</strong>这个式子的结果会替换掉 <strong>%d</strong><br><img src="https://img-blog.csdnimg.cn/20200209221506654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMDA1NTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意：printf的使用要遵照这样的格式：<strong>printf(“格式化字符串”, 参数1, 参数2, … ,参数n)；</strong><br>其中<strong>格式化字符串</strong>是你想要输出的主要内容，参数1..n为放在文中占位符的东西，参数之间用<strong>英文逗号</strong>隔开</p></blockquote><p>在上面简单计算器的基础上，我们可以做一些小的扩展，比如，我希望计算下面算式的结果</p><table><thead><tr><th>2+2</th><th>2*3</th><th>4➗2</th></tr></thead></table><p>根据我们上面所讲，我们可以可以尝试拼凑出下面的一行代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2+2 = %d, 2*3 = %d, 3/2 = %d"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：C语言的除号是<kbd>/</kbd>，而不是➗</p></blockquote><p>把它替换掉原来的printf我们得到以下程序</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2+2 = %d, 2*3 = %d, 3/2 = %d"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来运行一下这个程序，看一看结果<br><img src="https://img-blog.csdnimg.cn/20200209223323912.png" alt="倒是没算错"><br>当然，其实我们更希望程序能像下面这样分行输出</p><blockquote><p>2+2 = 4,<br>2*3 = 6,<br>4/2 = 2</p></blockquote><p>但经过之前的实践，我们知道不论是用多个printf还是加上回车我们都无法成功换行。</p><h1 id="如何换行？"><a href="#如何换行？" class="headerlink" title="如何换行？"></a>如何换行？</h1><p>这时候，就需要用到一个叫做转义符的东西 <strong>“\n”</strong>，我们把之前的代码改成这样</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2+2 = %d,\n 2*3 = %d,\n 3/2 = %d"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会有效果吗？运行一下再说</p><p><img src="https://img-blog.csdnimg.cn/20200209223958979.png" alt="商业级排版"></p><p><strong>完美！</strong> 我们成功实现了让文字换行输出</p><p>别着急，还有一个新的问题</p><h1 id="什么是转义符？"><a href="#什么是转义符？" class="headerlink" title="什么是转义符？"></a>什么是转义符？</h1><p>也许你不懂什么编码，但是有一个常识你需要知道：对于计算机来讲，你<strong>键盘上的每一个符号</strong>（包括abcd，回车，冒号，句号，退格键……）在计算中都有唯一的编码与之对应</p><blockquote><p>不太理解?<br>记得谍战片里面发电报的情景吗？<br>主人公把从电台接收滴答滴答的莫尔斯密码记在纸上，之后拿出密码本一句话一句话的翻译，最后得出正确的情报<br>类似的，由于计算机只理解二进制数据，想要把键盘上的符号发给计算机，就必须通过一个<strong>密码本</strong>进行翻译。反之亦然，计算机也会通过查表得方法把它脑子里的东西翻译给我们</p></blockquote><p><code>这里我写的不是很满意，但是想不出来更容易理解的比喻了， 如果您有好的想法，请在下方留言，万分感谢！</code></p><p><code>未完待续，2020年2月9日22点55分 更新</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础教程（一）</title>
      <link href="/2020/02/08/c-yu-yan-ji-chu-jiao-cheng-yi/"/>
      <url>/2020/02/08/c-yu-yan-ji-chu-jiao-cheng-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="关于编程环境"><a href="#关于编程环境" class="headerlink" title="关于编程环境"></a>关于编程环境</h1><p>网络上有很多C语言编程环境的配置教程，也有很多开箱即用的安装包，请大家自行摸索，对于学习来讲，微软的Visual Studio足以满足我们的需求。</p><p><code>注意：由于编译器不同，Visual Studio并不完全适合C语言开发，如果您的学校有具体的环境要求，还请遵照学校要求</code></p><blockquote><p>对于刚刚接触编程的新手，我本人<strong>不提倡</strong>直接在Linux环境编程（即使这样很装逼），也<strong>不提倡</strong>使用文本编辑器结合控制台指令编译的方式进行学习！</p></blockquote><h1 id="开篇：Hello-World"><a href="#开篇：Hello-World" class="headerlink" title="开篇：Hello World"></a>开篇：Hello World</h1><p>首先，请新建一个空白的文件，重命名为 Hello World.c<br>把下面的东西复制粘贴到你新建的文件里面</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用您ide的编译运行功能（一般快捷键为<kbd>F5</kbd>)，您应当能看到一个黑色窗口弹出，并显示如下文字<br><img src="https://img-blog.csdnimg.cn/2020020722072394.png" alt="你好，世界！"></p><p><code>没有显示，或者黑窗一闪而过？，请尝试以下代码！</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>我想现在你一定有很多的疑问，但请不要着急，接下来我会进行说明。</code></p><h2 id="关于printf-“Hello-World”"><a href="#关于printf-“Hello-World”" class="headerlink" title="关于printf(“Hello World”)"></a>关于printf(“Hello World”)</h2><p><strong>究竟是什么东西让我的屏幕上显示出了 Hello World ?</strong></p><p>如果你把程序进行修改，比如把双引号里面的 <em>Hello World</em> 换成 <em>您吃了吗？</em> ，你会发现程序的运行结果也随之改变。<br><strong>e.g.</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>换为</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更进一步，如果你把 <strong>printf(“您吃了吗？”);</strong> 多复制几次，比如这样</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，请保持您新输入的东西在 <strong>int main(){ </strong> 和 <strong>return 0</strong>之间，稍后我会说明原因</p></blockquote><p>再次运行程序，你会发现你的屏幕上出现了一连串来自电脑的亲切的问候.<br><img src="https://img-blog.csdnimg.cn/20200207223123544.png" alt="冬日里温暖的问候"></p><blockquote><p>当然，作为完美主义者，您可能并 <strong>不喜欢这些话挤在一行</strong> ，可如果你尝试在句子里添加回车，你会发现加再多的回车也<strong>没有效果</strong>，甚至会导致程序无法运行，请不要着急，稍后我会说明原因</p></blockquote><p>这时候，相信您已经猜到了，就是这个看起来很奇怪的 <strong>printf(“ “);</strong> 把我们投喂给它的东西放到了屏幕上</p><h3 id="printf-是什么，它是从哪来的？"><a href="#printf-是什么，它是从哪来的？" class="headerlink" title="printf()是什么，它是从哪来的？"></a>printf()是什么，它是从哪来的？</h3><p>还记得我们最开始的程序吗</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意看这一句</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>#include</strong>是什么？<br>如果我们说的专业一点就是</p><blockquote><p>#include 是C/C++中包含头文件命令，用于将指定头文件嵌入源文件中。<br>……来自百度百科</p></blockquote><p>当然，这样的解释对于新手来讲未免看的有些云里雾里。<br>为了深刻理解，我们不妨<strong>先删掉</strong>代码中的<code>#include &lt;stdio.h&gt;</code></p><p>我们的程序就变成了这样</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//Hello world.c</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，如果我们重新编译运行程序，我们只会得到一条错误信息：<code>“printf”: 找不到标识符</code></p><p><code>注意：不同的ide对于错误提示可能有所不同</code></p><p>发生了什么？我们的编译器找不到<strong>printf</strong>了</p><p>那么是不是C语言本身并不包含<strong>printf</strong>这个东西，<strong>它其实是存在于其他人写好的文件当中</strong>呢?</p><p>确实是这样，C语言本身不能直接在屏幕上显示文字，<strong>前辈们</strong>为了方便后人编写程序，已经把输出文字的功能写好，并装在了<strong>stdio.h</strong>文件里头</p><p>而 <code>#include&lt;stdio.h&gt;</code> 就是告诉你的编译器把<code>stdio.h</code>这个文件的内容加载到你的程序里面，让你能直接使用前辈的智慧结晶</p><p><code>注意：stdio.h 里并不包含printf的完整实现，之后我会说明清楚</code></p><p>这里面，<strong>前辈写的程序</strong>被<strong>包装</strong>成了<strong>函数</strong>，<strong>函数</strong>有个<strong>名字</strong>叫做<strong>printf</strong></p><p><strong>什么是函数？</strong>，这里我不做过多解释，你完全可以认为<strong>函数就是</strong>一个黑盒子、一个<strong>自动炒菜锅</strong>，你把<strong>菜</strong>放<strong>进括号</strong>，<strong>他给你炒出你要的菜</strong></p><blockquote><p>不懂什么是 <strong>函数</strong> ？ 不要着急，之后我会花一章来慢慢说明</p></blockquote><p>现在，我们知道，<strong>printf</strong>来自<strong>stdio.h</strong>（全称 standard input &amp; output 即标准输入输出）这个文件，它由前辈们编写，为了方便我们编写其他的C程序。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
